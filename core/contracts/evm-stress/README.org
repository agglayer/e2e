#+TITLE: Using the EVM Stress Contract
#+DATE:
#+AUTHOR: John Hilliard
#+EMAIL: jhilliard@polygon.technology
#+CREATOR: John Hilliard
#+DESCRIPTION:


#+OPTIONS: toc:nil
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \usepackage{lmodern}
#+LATEX_HEADER: \geometry{left=1in,right=1in,top=1in,bottom=1in}
#+LaTeX_CLASS_OPTIONS: [letterpaper]

The EVM Stress contract is meant to be a simple contract that allows
us to trigger various load which can help us stress test EVM
implementations and provers.

There are generally three inputs to the smart contract
- ~action~ is like a selector which defines which opcode or method
  we'll be calling
- ~limit~ determines the lower bound on gas for any loops that we
  run. If the ~gas()~ drops below the ~limit~, we'll stop looping.
- ~extaddress~ can be used when opcodes require some address

| OPCode       | Action | Description                                   |
|--------------+--------+-----------------------------------------------|
| ADD          | 0x0000 | r := 1 + limit                                |
| ADD          | 0x0001 | repeat r := r + 1                             |
| KECCACK256   | 0x0002 | r := keccack256(extaddress)                   |
| KECCACK256   | 0x0003 | repeat r := keccack(r)                        |
| CALLDATACOPY | 0x0004 | calldatacopy(0,0,limit)                       |
| CALLDATACOPY | 0x0005 | repeat calldatacopy(0,0,32)                   |
| CODECOPY     | 0x0006 | codecopy(0,0,limit)                           |
| CODECOPY     | 0x0007 | repeat codecopy(0,0,32)                       |
| EXTCODECOPY  | 0x0008 | extcodecopy(extaddress,0,0,limit)             |
| EXTCODECOPY  | 0x0009 | repeat extcodecopy(extaddress,0,0,limit)      |
| EXTCODESIZE  | 0x000A | r := extcodesize(extaddress)                  |
| EXTCODESIZE  | 0x000B | repeat r := extcodesize(extaddress)           |
| EXTCODEHASH  | 0x000C | r := extcodehash(extaddress)                  |
| EXTCODEHASH  | 0x000D | repeat r := extcodehash(extaddress)           |
| BLOCKHASH    | 0x000E | r := blockhash(limit)                         |
| BLOCKHASH    | 0x000F | repeat r := blockhash(n)   # Descending       |
| MLOAD        | 0x0010 | r := mload(limit)                             |
| MLOAD        | 0x0011 | repeat r := mload(n)        # Ascending       |
| MSTORE       | 0x0012 | mstore(limit, extaddress)                     |
| MSTORE       | 0x0013 | repeat mstore(n, extaddress)  # Ascending     |
| SLOAD        | 0x0014 | r := sload(limit)                             |
| SLOAD        | 0x0015 | repeat r := sload(n)        # Ascending       |
| SSTORE       | 0x0016 | sstore(limit, extaddress)                     |
| SSTORE       | 0x0017 | repeat sstore(n, n)         # Ascending       |
| MCOPY        | 0x0018 | mcopy(0,32,limit)                             |
| MCOPY        | 0x0019 | repeat mcopy(0,n,32)        # Ascending (+32) |
| LOG4         | 0x001A | log4(0,limit,0,0,0,0)                         |
| LOG4         | 0x001B | repeat log4(0,32,0,0,0,0)                     |
| CREATE       | 0x001C | r := create(0,0,limit)                        |
| CREATE       | 0x001D | repeat r := create(0,0,24)                    |
| CREATE2      | 0x001E | r := create2(0,0,limit,0)                     |
| CREATE2      | 0x001F | repeat r := create2(0,0,24,r)                 |
| ECRECOVER    | 0x0020 | r := ecrecover(sig)                           |
| ECRECOVER    | 0x0021 | repeat r := ecrecover(sig)                    |
| SHA256       | 0x0022 | r := sha256(mem[0 .. limit+32])               |
| SHA256       | 0x0023 | repeat r := sha256(mem[0 .. 32])              |
| RIPEMD160    | 0x0024 | r := ripemd160(mem[0 .. limit+32])            |
| RIPEMD160    | 0x0025 | repeat r := ripemd160(mem[0 .. 32])           |
| MODEXP       | 0x0026 | r := modexp(base,exp,mod)                     |
| MODEXP       | 0x0027 | repeat r := modexp(base,exp,mod)              |
| ECADD        | 0x0028 | r := ecadd(P,Q)                               |
| ECADD        | 0x0029 | repeat r := ecadd(P,Q)                        |
| ECMUL        | 0x002A | r := ecmul(P,k)                               |
| ECMUL        | 0x002B | repeat r := ecmul(P,k)                        |
| ECPAIRING    | 0x002C | r := pairing(inputs)                          |
| ECPAIRING    | 0x002D | repeat r := pairing(inputs)                   |
| BLAKE2F      | 0x002E | r := blake2f(state)                           |
| BLAKE2F      | 0x002F | repeat r := blake2f(state)                    |
| POINTEVAL    | 0x0030 | r := point_eval(data)                         |
| POINTEVAL    | 0x0031 | repeat r := point_eval(data)                  |
| RIP-7212     | 0x0032 | r := rip7212_validate(sig,pk,msg)             |
| RIP-7212     | 0x0033 | repeat r := rip7212_validate(sig,pk,msg)      |
| BLAKE2F      | 0x0100 | blake2f(state) # limit defines rounds         |


* Deployment

Let's assume you want to run this somewhere.


#+begin_src bash
eth_address="0xfcC4D3152456d46a70a744f23D5311136AcB2DB4"
private_key="0x678ac44da86f317b7e484d6b206f96811a032394e68aa48138605d05849f9d3a"
rpc_url="https://sepolia.drpc.org"

# Compile it
docker run --volume "$PWD:/sources/" ethereum/solc:stable --strict-assembly --bin /sources/evm-stress.yul | tail -n 1  > evm-stress.yul.bin

# Wrap for deployment
polycli wrap-contract < evm-stress.yul.bin > evm-stress.yul.deploy.bin

# Deploy it
cast send --rpc-url "$rpc_url" --private-key "$private_key" 0x4e59b44847b379578588920ca78fbf26c0b4956c $(cast hz)$(sed 's/0x//' evm-stress.yul.deploy.bin)

# Get the address - it should be 0x863134579e4812F9d78081e9f519fAE9D01F2a10
cast create2 --salt $(cast hz) --init-code $(cat evm-stress.yul.deploy.bin)
#+end_src

This is the content of ~evm-stress.yul.deploy.bin~

#+begin_example

#+end_example

* Running

Let's assume the contract is deployed at
~0x863134579e4812F9d78081e9f519fAE9D01F2a10~ we can make some example
calls:

#+begin_src bash
eth_address="0xfcC4D3152456d46a70a744f23D5311136AcB2DB4"
private_key="0x678ac44da86f317b7e484d6b206f96811a032394e68aa48138605d05849f9d3a"
rpc_url="https://sepolia.drpc.org"

# Run ADD in a loop with 5M gas. Stop looping once there is 100000 gas left
# 0x1cd5a5f1ab0d7ffaa7d1b2bca6147766e2bba4a989d65f730bb25d043e0be1ac
cast send --rpc-url "$rpc_url" --private-key "$private_key" \
    --gas-limit 5000000 \
    0x863134579e4812F9d78081e9f519fAE9D01F2a10 $(cast abi-encode 'f(uint256,uint256,uint256)' 0x0001 100000 0x0000000000000000000000000000000000000000)

# Run EXTCODEHASH in a loop with 5M gas. Stop looping once there is 100000 gas left. Use 0x0037e0d430a185E0506C910e384333d7F9Ed42A0 as the extaddress since it's large
# 0xf1eeaa162b537850056469223289a39d7c5cbf7ce20a10cf149bf0286554b961
cast send --rpc-url "$rpc_url" --private-key "$private_key" \
    --gas-limit 5000000 \
    0x863134579e4812F9d78081e9f519fAE9D01F2a10 $(cast abi-encode 'f(uint256,uint256,uint256)' 0x000D 100000 0x0037e0d430a185E0506C910e384333d7F9Ed42A0)

# Run BLAKE2F with a gas limit of 5M and with 4M rounds
# 0x5c0e4955c0804a03ea50b8fc0d8028bc22841b618796f2aabe6e2c878cc6e4ee
cast send --rpc-url "$rpc_url" --private-key "$private_key" \
    --gas-limit 5000000 \
    0x863134579e4812F9d78081e9f519fAE9D01F2a10 $(cast abi-encode 'f(uint256,uint256,uint256)' 0x0100 4000000 0x0000000000000000000000000000000000000000)
#+end_src
