#+TITLE: OKX Protocol Upgrade Test Guide
#+DATE:
#+AUTHOR: John Hilliard
#+EMAIL: jhilliard@polygon.technology
#+CREATOR: John Hilliard
#+DESCRIPTION:


#+OPTIONS: toc:nil
#+LATEX_HEADER: \usepackage{geometry}
#+LATEX_HEADER: \usepackage{lmodern}
#+LATEX_HEADER: \geometry{left=1in,right=1in,top=1in,bottom=1in}
#+LaTeX_CLASS_OPTIONS: [letterpaper]

* Overview

This guide walks through the test procedure for the OKX protocol
upgrade from Hermez to Polygon Pessimistic (PP) consensus. The test
uses a shadow fork of mainnet to simulate the upgrade process as
closely as possible to production conditions.

Key Components:

- Anvil: Local Ethereum fork for testing
- Agglayer: The aggregation layer node and prover
- Aggkit: The component that creates the certificate to be settled
- Smart Contracts: Rollup manager and related contracts

*Important*: This test procedure uses specific block numbers and
addresses from mainnet. Ensure you understand each step before
execution.

Prerequisites:

- Docker installed and running
- Git access to required repositories
- Basic understanding of Ethereum, smart contracts, and the Polygon ecosystem
- Sufficient disk space for blockchain data (~3 GB)

* Setup and Preparation

** Create Working Directory Structure

Create a temporary directory to organize all test components:

#+begin_src bash
tdir=$(mktemp -d)
mkdir "$tdir/anvil"
mkdir "$tdir/agglayer"
mkdir "$tdir/aggkit"
chmod -R 777 "$tdir"
#+end_src

** Build Special Aggkit Version

We need a specific branch with the certificate creation code for this upgrade:


#+begin_src bash
# Clone and build the special version with upgrade patches
pushd $tdir
git clone git@github.com:agglayer/aggkit.git aggkit-code
pushd aggkit-code
git switch feat/hermez_to_pp_upgrade_patch # Special branch for upgrade
make build-docker
popd
popd
#+end_src

** Prepare Agglayer Contracts

Clone the specific version of contracts needed for the rollup manager upgrade:

#+begin_src bash
# Get the exact version of contracts for this upgrade
pushd $tdir
git clone git@github.com:agglayer/agglayer-contracts.git
pushd agglayer-contracts
git checkout v11.0.0-rc.0 # Specific version for OKX upgrade
popd
popd
#+end_src

* L1 Environment Setup

** Start Anvil Shadow Fork
Anvil is an important component in the test process. We're going to
use it to create a shadow fork of L1 mainnet.

#+begin_src bash
# Start Anvil with mainnet fork
# Block 22688021 is chosen as it's before the upgrade but recent enough
docker run -d -p 3000:8545 \
    --rm --name anvil \
    --network rpcs \
    --entrypoint "anvil" \
    ghcr.io/foundry-rs/foundry:latest \
    --block-time 12 \
    --host 0.0.0.0 \
    --fork-url https://mainnet.gateway.tenderly.co/63cRsf8GnvH5oA5H4dPiYs \
    --state $tdir/anvil \
    --fork-block-number 22688021
#+end_src

** Configure Fork Environment

There are two quick changes we'll make right away. First we'll use
~evm_setNextBlockTimestamp~ to adjust the timestamp on the chain. If
we skip this step various things can go wrong. Second we'll adjust the
~_minDelay~ of the timelock contract. If we don't do this, we'll need
to wait a few days in order to do this test. By running ~forge inspect
PolygonZkEVMTimelock storage~ we got the storage layout ad we have a
pretty good sense which storage slot needs to be modified to.

#+begin_example
╭-------------+---------------------------------------------------+------+--------+-------+---------------------------------------------------------╮
| Name        | Type                                              | Slot | Offset | Bytes | Contract                                                |
+===================================================================================================================================================+
| _roles      | mapping(bytes32 => struct AccessControl.RoleData) | 0    | 0      | 32    | contracts/PolygonZkEVMTimelock.sol:PolygonZkEVMTimelock |
|-------------+---------------------------------------------------+------+--------+-------+---------------------------------------------------------|
| _timestamps | mapping(bytes32 => uint256)                       | 1    | 0      | 32    | contracts/PolygonZkEVMTimelock.sol:PolygonZkEVMTimelock |
|-------------+---------------------------------------------------+------+--------+-------+---------------------------------------------------------|
| _minDelay   | uint256                                           | 2    | 0      | 32    | contracts/PolygonZkEVMTimelock.sol:PolygonZkEVMTimelock |
╰-------------+---------------------------------------------------+------+--------+-------+---------------------------------------------------------╯
#+end_example

#+begin_src bash
# Set current timestamp to avoid timing issues
cast rpc --rpc-url http://127.0.0.1:3000 evm_setNextBlockTimestamp $(date +%s)

# override the _minDelay for our timelock
cast rpc --rpc-url http://127.0.0.1:3000 anvil_setStorageAt 0xEf1462451C30Ea7aD8555386226059Fe837CA4EF $(cast to-uint256 2) $(cast to-uint256 1)
#+end_src

* Test Account Setup

** Create Test Keys
We're runing a shadow fork of mainnet. This means we'll need new keys
for the critical roles because we don't have access to the real OKX
sequencer key or the real Agglayer key. We're going to create two new
keys and store them in a configuration directory. Later on, we'll grant
roles for these keys.

#+begin_src bash
# Create the Agglayer test account
cast wallet new
# Successfully created new keypair.
# Address:     0xaff8Ed903d079cD0E7fE29138b37B6AC8fFe4AdF
# Private key: 0x9cef1f40624aba3fa6a24c587dde060ab9aa823fef108db63fd0ba5f0a4ba830

cast wallet import --private-key 0x9cef1f40624aba3fa6a24c587dde060ab9aa823fef108db63fd0ba5f0a4ba830 --keystore-dir conf/ agglayer.keystore

# Create the Sequencer test account
cast wallet new
# Successfully created new keypair.
# Address:     0x8Ad44b2b5368a3043901ee373dC6D400c6A2e83F
# Private key: 0x452e72182077e2bc90ad9a53afc1dc4476fa429cec9fc6a437fb95b791045d43

cast wallet import --private-key 0x452e72182077e2bc90ad9a53afc1dc4476fa429cec9fc6a437fb95b791045d43 --keystore-dir conf/ sequencer.keystore
#+end_src

* Agglayer Services

** Start Agglayer Components

At this point, we should be good to startup the Agglayer and Agglayer Prover.

#+begin_src bash
# you will need an SP1 network key to run the agglayer-prover
sp1_key=$(cat conf/sp1.key)

# Start the Agglayer Prover
docker run -d --rm \
    --name agglayer-prover \
    --network rpcs \
    -v "$PWD/conf:/etc/agglayer:ro" \
    -e "SP1_PRIVATE_KEY=$sp1_key" \
    -e "NETWORK_RPC_URL=https://rpc.production.succinct.xyz" \
    -e "RUST_BACKTRACE=1" \
    -e "NETWORK_PRIVATE_KEY=$sp1_key" \
    --entrypoint agglayer \
    ghcr.io/agglayer/agglayer:0.3.3 \
    prover --cfg /etc/agglayer/agglayer-prover-config.toml

# Start the Agglayer Node
docker run -d --rm \
    --name agglayer-node \
    --network rpcs \
    -v "$PWD/conf:/etc/agglayer:ro" \
    -v "$tdir/agglayer:/var/agglayer" \
    --entrypoint agglayer \
    ghcr.io/agglayer/agglayer:0.3.3 \
    run --cfg /etc/agglayer/agglayer-config.toml
#+end_src

* Permission Changes

** Grant Sequencer role

Set up the new test account as trusted sequencer:

#+begin_src bash
# Impersonate OKX admin account to grant permissions
cast rpc --rpc-url http://127.0.0.1:3000 anvil_impersonateAccount 0xa90b4c8b8807569980f6cc958c8905383136b5ea

# Set our test account as the trusted sequencer
cast send --unlocked --from 0xa90b4c8b8807569980f6cc958c8905383136b5ea --rpc-url http://127.0.0.1:3000 0x2B0ee28D4D51bC9aDde5E58E295873F61F4a0507 'setTrustedSequencer(address)' 0x8Ad44b2b5368a3043901ee373dC6D400c6A2e83F

# Stop impersonation
cast rpc --rpc-url http://127.0.0.1:3000 anvil_stopImpersonatingAccount 0xa90b4c8b8807569980f6cc958c8905383136b5ea
#+end_src

** Grant Aggregator Role

We're going to make a similar call in order to grant the
~TRUSTED_AGGREGATOR_ROLE~ to our new Agglayer key.

#+begin_src bash
# Impersonate Polygon admin to grant aggregator role
cast rpc --rpc-url http://127.0.0.1:3000 anvil_impersonateAccount 0x242daE44F5d8fb54B198D03a94dA45B5a4413e21

# Grant TRUSTED_AGGREGATOR_ROLE to our Agglayer account
cast send --unlocked --from 0x242daE44F5d8fb54B198D03a94dA45B5a4413e21 --rpc-url http://127.0.0.1:3000 0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2 'grantRole(bytes32 role, address account)' $(cast keccak TRUSTED_AGGREGATOR_ROLE) 0xaff8Ed903d079cD0E7fE29138b37B6AC8fFe4AdF

# Stop impersonation
cast rpc --rpc-url http://127.0.0.1:3000 anvil_stopImpersonatingAccount 0x242daE44F5d8fb54B198D03a94dA45B5a4413e21

# Fund the Agglayer account for gas fees
cast rpc --rpc-url http://127.0.0.1:3000 anvil_setBalance 0xaff8Ed903d079cD0E7fE29138b37B6AC8fFe4AdF 1000000000000000000
#+end_src

* Contract Upgrade Process

** Prepare Rollup Manager Upgrade

Run upgrade scripts in the contracts repository:

#+begin_src bash
# Start interactive container for running upgrade scripts
docker run \
    --network rpcs \
    -v $tdir/agglayer-contracts:/agglayer-contracts \
    -v $PWD/conf:/etc/conf:ro \
    -it node:22-bookworm /bin/bash

# The rest of these commands would run within the docker shell
apt-get update
apt-get -y install jq zile

cd /agglayer-contracts/upgrade/upgrade-rollupManager-v0.3.1/

# Configure upgrade parameters
jq '.tagSCPreviousVersion = "FEP-v10.0.0-rc.0"' upgrade_parameters.json.example > _t; mv _t upgrade_parameters.json
jq '.rollupManagerAddress = "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2"' upgrade_parameters.json > _t; mv _t upgrade_parameters.json
# We're setting a very short timelockDelay here in order to speed things up
jq '.timelockDelay = "60"' upgrade_parameters.json > _t; mv _t upgrade_parameters.json
jq '.timelockSalt = "0x0000000000000000000000000000000000000000000000000000000000000000"' upgrade_parameters.json > _t; mv _t upgrade_parameters.json
jq '.test = true' upgrade_parameters.json > _t; mv _t upgrade_parameters.json

# Prepare environment
cd /agglayer-contracts
mkdir /agglayer-contracts/.openzeppelin
cp upgrade/upgradePessimistic/mainnet-info/mainnet.json .openzeppelin/mainnet.json
git config --global --add safe.directory /agglayer-contracts
npm i

export MAINNET_PROVIDER=http://anvil:8545
npx hardhat run ./upgrade/upgrade-rollupManager-v0.3.1/upgrade-rollupManager-v0.3.1.ts --network mainnet

# Prepare new rollup type configuration
cat << EOF > tools/addRollupType/add_rollup_type.json
{
    "type": "Timelock",
    "consensusContract": "PolygonPessimisticConsensus",
    "consensusContractAddress": "0x18C45DD422f6587357a6d3b23307E75D42b2bc5B",
    "polygonRollupManagerAddress": "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2",
    "verifierAddress": "0x0459d576A6223fEeA177Fb3DF53C9c77BF84C459",
    "description": "Type: Pessimistic, Version: v0.3.3, genesis: /ipfs/QmUXnRoPbUmZuEZCGyiHjEsoNcFVu3hLtSvhpnfBS2mAYU",
    "forkID": 12,
    "timelockDelay": 60,
    "programVKey": "0x00eff0b6998df46ec388bb305618089ae3dc74e513e7676b2e1909694f49cc30",
    "outputPath": "add_rollup_type_output.json"
}
EOF

# Add the new rollup type
npx hardhat run ./tools/addRollupType/addRollupType.ts --network mainnet

# we can exit the shell show
exit
#+end_src

** Execute Timelock Transactions

At this point, we've generated the timelock transactions that we need
to execute. This will require impersonating the rollup manager admins
account

#+begin_src bash
# Impersonate rollup manager admin
cast rpc --rpc-url http://127.0.0.1:3000 anvil_impersonateAccount 0x242dae44f5d8fb54b198d03a94da45b5a4413e21

# Schedule the new rollup type addition
cast send \
    --unlocked \
    --from 0x242dae44f5d8fb54b198d03a94da45b5a4413e21 \
    --rpc-url http://127.0.0.1:3000 \
    $(jq -r '.timelockContractAddress' $tdir/agglayer-contracts/upgrade/upgrade-rollupManager-v0.3.1/upgrade_output.json) \
    $(jq -r '.scheduleData' $tdir/agglayer-contracts/tools/addRollupType/add_rollup_type_output.json)

# Wait at least 60 seconds
sleep 60

# Execute the rollup type addition
cast send \
    --unlocked \
    --from 0x242dae44f5d8fb54b198d03a94da45b5a4413e21 \
    --rpc-url http://127.0.0.1:3000 \
    $(jq -r '.timelockContractAddress' $tdir/agglayer-contracts/upgrade/upgrade-rollupManager-v0.3.1/upgrade_output.json) \
    $(jq -r '.executeData' $tdir/agglayer-contracts/tools/addRollupType/add_rollup_type_output.json)

# Schedule the rollup manager upgrade
cast send \
    --unlocked \
    --from 0x242dae44f5d8fb54b198d03a94da45b5a4413e21 \
    --rpc-url http://127.0.0.1:3000 \
    $(jq -r '.timelockContractAddress' $tdir/agglayer-contracts/upgrade/upgrade-rollupManager-v0.3.1/upgrade_output.json) \
    $(jq -r '.scheduleData' $tdir/agglayer-contracts/upgrade/upgrade-rollupManager-v0.3.1/upgrade_output.json)

# Wait at least 60 seconds
sleep 60

# Execute the rollup manager upgrade
cast send \
    --unlocked \
    --from 0x242dae44f5d8fb54b198d03a94da45b5a4413e21 \
    --rpc-url http://127.0.0.1:3000 \
    $(jq -r '.timelockContractAddress' $tdir/agglayer-contracts/upgrade/upgrade-rollupManager-v0.3.1/upgrade_output.json) \
    $(jq -r '.executeData' $tdir/agglayer-contracts/upgrade/upgrade-rollupManager-v0.3.1/upgrade_output.json)

# Stop impersonation
cast rpc --rpc-url http://127.0.0.1:3000 anvil_stopImpersonatingAccount 0x242dae44f5d8fb54b198d03a94da45b5a4413e21
#+end_src

** Verify Upgrade

Now we can do a few sanity checks to make sure that everything worked
as expected.

#+begin_src bash
# Check rollup manager version (should be al-v0.3.1)
cast call --rpc-url http://127.0.0.1:3000 0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2 "ROLLUP_MANAGER_VERSION()(string)"

# Check rollup type count (should be 11)
cast call --rpc-url http://127.0.0.1:3000 0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2 "rollupTypeCount() external view returns (uint32)"
#+end_src

** Execute Migration
Assuming the rollup manager is upgraded and the rollup type count is
11 now, we should be good to proceed with the actual update.

#+begin_src bash
# Impersonate admin for migration
cast rpc --rpc-url http://127.0.0.1:3000 anvil_impersonateAccount 0x242dae44f5d8fb54b198d03a94da45b5a4413e21

# Initialize migration of rollup 3 (OKX) to type 11 (PP)
cast send \
    --unlocked \
    --from 0x242dae44f5d8fb54b198d03a94da45b5a4413e21 \
    --rpc-url http://127.0.0.1:3000 \
    0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2 "initMigrationToPP(uint32,uint32)" 3 11

# Stop impersonation
cast rpc --rpc-url http://127.0.0.1:3000 anvil_stopImpersonatingAccount 0x242dae44f5d8fb54b198d03a94da45b5a4413e21
#+end_src

* Testing and Validation

** Run Aggkit for Certificate Settlement

At this point, the rollup should be upgraded to PP on L1. There are a
lot of tests that need to be done. This is still a work in
progress. As a starting point, we should run the aggkit and ensure a
certificate can be settled:

#+begin_src bash
# Run aggkit with specific components
docker run \
    --rm \
    --name aggkit \
    --network rpcs \
    -v $tdir/aggkit:/tmp \
    -v $PWD/conf:/etc/aggkit \
    aggkit:local run --cfg=/etc/aggkit/aggkit.toml --components=aggsender,bridge
#+end_src

If everything works, we should see this message at the end:

#+begin_example
2025-06-13T14:09:23.304Z        INFO    aggsender/aggsender.go:174      Halting aggsender since certificate got sent successfully for end block %d17428134      {"pid": 1, "version": "v0.3.0-beta1-39-g0de426e", "module": "aggsender"}
panic: AggSender halted after sending certificate until end block 17428134

goroutine 157 [running]:
github.com/agglayer/aggkit/aggsender.(*AggSender).upgradeUntilBlockAndHalt(0xc0003e8000, {0x1b4b238, 0x2717720}, 0x109eea6)
        /app/aggsender/aggsender.go:176 +0x3e5
github.com/agglayer/aggkit/aggsender.(*AggSender).Start(0xc0003e8000, {0x1b4b238, 0x2717720})
        /app/aggsender/aggsender.go:152 +0x1fe
created by main.start in goroutine 1
        /app/cmd/run.go:119 +0xda5
#+end_example

* Clean up

** Full Cleanup
#+begin_src bash
docker stop agglayer-node
docker stop agglayer-prover
docker stop anvil

# Remove temporary directory (optional)
# rm -rf $tdir
#+end_src

** Soft Reset

Since the Aggkit takes several hours to sync, it can be useful to
reset some components but keep the state.

#+begin_src bash
# If we're doing a soft reset, don't stop anvil and keep the same $tdir
docker stop agglayer-node
docker stop agglayer-prover

sudo rm -rf $tdir/agglayer/*
sudo rm -rf $tdir/aggkit/aggsender.sql*
sudo rm -rf $tdir/aggkit/reorgdetectorl*
#+end_src

It can be useful to delete various blocks that are synced after the
shadow fork number:

#+begin_src sql
-- Soft reset
-- sudo sqlite3 $tdir/aggkit/L1InfoTreeSync.sqlite
delete from l1_info_root where block_num > 22688021;
delete from block where num > 22688021;
delete from l1info_leaf where block_num > 22688021;
delete from verify_batches where block_num > 22688021;
delete from l1info_initial where block_num > 22688021;
#+end_src


