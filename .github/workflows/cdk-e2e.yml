name: Configurable E2E Execution
run-name: Run Kurtosis CDK E2E test on ${{ inputs.kurtosis_cdk_ref }} by @${{ github.actor }}

# act --container-options "--group-add $(stat -c %g /var/run/docker.sock)" -s GITHUB_TOKEN=$ACT_GITHUB_TOKEN workflow_call
on:
  workflow_call:
    inputs:
      kurtosis_cdk_ref:
        description: "The tag, branch, or commit of the kurtosis-cdk package that will be used for "
        required: false
        type: string
        default: "139d2c92775b104df5e5adbb756a0b81718793a3"
      kurtosis_cdk_args:
        description: "Input arguments for the Kurtosis CDK package."
        required: false
        type: string
        default: |
          {
            "deployment_stages": {
              "deploy_l2_contracts": true,
              "deploy_cdk_bridge_ui": false
            },
            "args": {
              "consensus_contract_type": "pessimistic",
              "erigon_strict_mode": false,
              "enable_normalcy": true,
              "agglayer_prover_sp1_key": "",
              "agglayer_prover_primary_prover": "mock-prover",
              "sequencer_type": "erigon"
            }
          }

      kurtosis_cdk_enclave_name:
        description: "The name to be used for the kurtosis enclave"
        required: false
        type: string
        default: "cdk"

      docker_image_override:
        description: "The docker image in kurtosis that will replaced with a local tag (e.g. agglayer_image)"
        required: false
        type: string
        default: ""

      docker_tag:
        description: "A local docker tag to be used as the image for a particular service in kurtosis (e.g. agglayer:local)"
        required: false
        type: string
        default: ""

jobs:
  run-kurtosis-image:
    runs-on: ubuntu-latest-16-cores
    steps:
      - name: Checkout agglayer-e2e
        uses: actions/checkout@v4
        with:
          path: agglayer-e2e

      - name: Checkout kurtosis-cdk
        uses: actions/checkout@v4
        with:
          repository: 0xPolygon/kurtosis-cdk
          ref: ${{ inputs.kurtosis_cdk_ref }}
          path: kurtosis-cdk

      - name: Install foundry
        uses: foundry-rs/foundry-toolchain@v1.3.1

      - name: Install bats
        uses: bats-core/bats-action@3.0.0

      - name: Install polycli
        run: |
          polycli_version="v0.1.74"
          pushd $(mktemp -d) || exit 1
          curl -s -L "https://github.com/0xPolygon/polygon-cli/releases/download/${polycli_version}/polycli_${polycli_version}_linux_amd64.tar.gz" > polycli.tar.gz
          tar xf polycli.tar.gz
          mv polycli_* /usr/local/bin/polycli
          polycli version

      - name: Install kurtosis cli and jq
        run: |
          echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
          sudo apt update
          sudo apt install -y kurtosis-cli jq

      - name: Write args input to a file
        run: |
          docker_tag='${{ inputs.docker_tag }}'
          if [[ $docker_tag == "" ]]; then
              echo '${{ inputs.kurtosis_cdk_args }}' | tee /tmp/kurtosis-args.json
              exit
          fi
          echo '${{ inputs.kurtosis_cdk_args }}' | jq --arg img '${{ inputs.docker_image_override }}' --arg tag '${{ inputs.docker_tag }}' '.args[$img] = $tag' | tee /tmp/kurtosis-args.json

      # Do not merge this
      - name: List current images
        run: |
          docker images
          if [[ -e /tmp/docker-image.tar ]]; then
              echo "We have an image locally"
          else
              echo "We have nothing!!!"
          fi

      - name: Startup the kurtosis-cdk package
        run: |
          pushd kurtosis-cdk || exit 1
          kurtosis run --enclave '${{ inputs.kurtosis_cdk_enclave_name }}' --args-file /tmp/kurtosis-args.json .
          kurtosis analytics disable

      - name: Run e2e tests
        run: |
          pushd agglayer-e2e || exit 1
          export BATS_LIB_PATH="$PWD/core/helpers/lib"
          bats tests/agglayer/bridges.bats --filter-tags agglayer

      - name: Clean up kurtosis-cdk enclave
        if: ${{ always() }}
        run: |
          kurtosis enclave stop '${{ inputs.kurtosis_cdk_enclave_name }}'
          kurtosis clean

