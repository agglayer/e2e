name: Configurable E2E Execution
run-name: Run Kurtosis CDK E2E test by @${{ github.actor }}

# TODO solve for remote callers setting bats environment variables
# act --container-options "--group-add $(stat -c %g /var/run/docker.sock)" -s GITHUB_TOKEN=$ACT_GITHUB_TOKEN workflow_call
on:
  workflow_call:
    inputs:
      kurtosis-cdk-ref:
        description: "The tag, branch, or commit of the kurtosis-cdk package that will be used"
        required: true
        type: string

      test-name:
        description: "The name of the test to run"
        required: true
        type: string

      agglayer-e2e-ref:
        description: "The tag, branch, or commit of the agglayer/e2e repo that will used for running tests"
        required: true
        type: string

      kurtosis-cdk-args:
        description: "Input arguments for the Kurtosis CDK package."
        required: true
        type: string

      kurtosis-cdk-enclave-name:
        description: "The name to be used for the kurtosis enclave"
        required: false
        type: string
        default: "cdk"

      docker-image-override:
        description: "The docker image in kurtosis that will replaced with a local tag (e.g. agglayer_image)"
        required: false
        type: string
        default: ""

      docker-tag:
        description: "A local docker tag to be used as the image for a particular service in kurtosis (e.g. agglayer:local)"
        required: false
        type: string
        default: "local"

      docker-artifact-name:
        description: "A name of a docker image to download (e.g. docker-image)"
        required: false
        type: string
        default: "cdk"

env:
  POLYCLI_VERSION: v0.1.78

jobs:
  test-cdk-e2e:
    name: ${{ inputs.test-name }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout agglayer-e2e
        uses: actions/checkout@v4
        with:
          repository: agglayer/e2e
          ref: ${{ inputs.agglayer-e2e-ref }}
          path: agglayer-e2e

      - name: Checkout kurtosis-cdk
        uses: actions/checkout@v4
        with:
          repository: 0xPolygon/kurtosis-cdk
          ref: ${{ inputs.kurtosis-cdk-ref }}
          path: kurtosis-cdk

      - name: Download artifact
        if: inputs.docker-artifact-name != ''
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.docker-artifact-name }}
          path: "/tmp"

      - name: Load image
        run: |
          if [[ -e /tmp/${{ inputs.docker-artifact-name }}.tar ]]; then
              docker load --input /tmp/${{ inputs.docker-artifact-name }}.tar
              docker images
          fi

      - name: Install foundry
        uses: foundry-rs/foundry-toolchain@v1.3.1

      - name: Install bats
        uses: bats-core/bats-action@3.0.0

      - name: Install polycli
        run: |
          polycli_version="${{ env.POLYCLI_VERSION }}"
          pushd $(mktemp -d) || exit 1
          curl -s -L "https://github.com/0xPolygon/polygon-cli/releases/download/${polycli_version}/polycli_${polycli_version}_linux_amd64.tar.gz" > polycli.tar.gz
          tar xf polycli.tar.gz
          mv polycli_* /usr/local/bin/polycli
          polycli version
          popd

      - name: Install kurtosis cli and jq
        run: |
          echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
          sudo apt update
          sudo apt install -y kurtosis-cli jq
          kurtosis analytics disable

      - name: Write args input to a file
        run: |
          docker_tag='${{ inputs.docker-tag }}'
          if [[ $docker_tag == "" ]]; then
              echo '${{ inputs.kurtosis-cdk-args }}' | tee /tmp/kurtosis-args.json
              exit
          fi
          echo '${{ inputs.kurtosis-cdk-args }}' | jq --arg img '${{ inputs.docker-image-override }}' --arg tag '${{ inputs.docker-tag }}' '.args[$img] = $tag' | tee /tmp/kurtosis-args.json

      - name: Startup the kurtosis-cdk package
        run: |
          pushd kurtosis-cdk || exit 1
          kurtosis run --enclave '${{ inputs.kurtosis-cdk-enclave-name }}' --args-file /tmp/kurtosis-args.json .
          popd

      - name: Run e2e tests
        run: |
          pushd agglayer-e2e || exit 1
          set -a
          source ./tests/.env
          set +a
          export BATS_LIB_PATH="$PWD/core/helpers/lib"
          export PROJECT_ROOT="$PWD"
          export ENCLAVE="${{ inputs.kurtosis-cdk-enclave-name }}"
          export DISABLE_L2_FUND="true"
          bats tests/cdk/access-list-e2e.bats tests/cdk/basic-e2e.bats tests/cdk/e2e.bats
          if [[ "${{ inputs.test-name }}" == "test-fork9-cdk-validium-e2e" || "${{ inputs.test-name }}" == "test-fork11-rollup-e2e" || "${{ inputs.test-name }}" == "test-fork12-rollup-e2e-zkevm-bridge" ]]; then
            bats tests/cdk/bridge-e2e.bats
          elif [[ "${{ inputs.test-name }}" == "test-fork12-cdk-validium-e2e" || "${{ inputs.test-name }}" == "test-fork12-rollup-e2e" ]]; then
            bats tests/aggkit/bridge-e2e.bats tests/aggkit/bridge-e2e-custom-gas.bats
          elif [[ "${{ inputs.test-name }}" == "test-fork12-pessimistic-e2e" ]]; then
            bats tests/aggkit/bridge-e2e.bats tests/aggkit/bridge-e2e-custom-gas.bats tests/aggkit/bridge-sovereign-chain-e2e.bats
          fi
          popd

      - name: Dump enclave logs
        if: ${{ failure() }}
        run: kurtosis dump ./dump
    
      - name: Generate archive name
        if: ${{ failure() }}
        run: |
          archive_name="dump_run_with_args_${{ inputs.test-name}}_${{ github.run_id }}"
          echo "ARCHIVE_NAME=${archive_name}" >> "$GITHUB_ENV"
          echo "Generated archive name: ${archive_name}"
  
      - name: Upload logs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ./dump

      - name: Clean up kurtosis-cdk enclave
        if: ${{ always() }}
        run: |
          kurtosis enclave stop '${{ inputs.kurtosis-cdk-enclave-name }}'
          kurtosis clean
