name: Standard Battery Tests - Kurtosis (Nightly)

on:
  schedule:
    # Run at 1:00 AM UTC every day
    - cron: '0 1 * * *'
  workflow_dispatch:
    inputs:
      agglayer-e2e-ref:
        description: "agglayer/e2e repo ref (branch, tag, or commit)"
        default: "main"
        required: true
        type: string
      kurtosis-cdk-ref:
        description: "kurtosis-cdk repo ref (branch, tag, or commit)"
        default: "main"
        required: true
        type: string
      kurtosis-enclave-name:
        description: "name of the kurtosis enclave to use"
        default: "cdk"
        required: false
        type: string
      stack:
        description: "name of the l2 cdk client"
        default: "cdk-op-geth"
        required: true
        type: choice
        options:
          - cdk-op-geth
          - cdk-erigon
      enable-monitored-chaos-stress-tests:
        description: "enable monitored chaos and stress tests scenario"
        default: false
        required: true
        type: boolean

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  discover-standard-tests:
    runs-on: ubuntu-latest
    env:
      AGGLAYER_E2E_REF: ${{ inputs.agglayer-e2e-ref || 'main' }}
    outputs:
      testfiles: ${{ steps.set-matrix.outputs.testfiles }}
    steps:
      - name: Checkout agglayer-e2e
        uses: actions/checkout@v4
        with:
          repository: agglayer/e2e
          ref: ${{ env.AGGLAYER_E2E_REF }}
          path: agglayer-e2e

      - name: Find standard-tagged bats files
        id: set-matrix
        run: |
            pushd agglayer-e2e || exit 1
            files=$(grep -rl '# bats file_tags=standard' ./tests | grep '\.bats$' || true)
            echo "Found files:"
            echo "$files"
            # Remove empty lines and ensure valid JSON array without trailing empty string
            files_json=$(echo "$files" | awk NF | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "Files array:"
            echo "$files_json"
            echo "testfiles=$files_json" >> $GITHUB_OUTPUT
            popd

  run-standard-battery-tests:
    runs-on: ubuntu-latest
    needs: discover-standard-tests
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        testfile: ${{ fromJson(needs.discover-standard-tests.outputs.testfiles) }}
        stack: ["cdk-op-geth", "cdk-erigon"]
    env:
      POLYCLI_VERSION: v0.1.84
      AGGLAYER_E2E_REF: ${{ inputs.agglayer-e2e-ref || 'main' }}
      KURTOSIS_CDK_REF: ${{ inputs.kurtosis-cdk-ref || 'main' }}
      KURTOSIS_ENCLAVE_NAME: ${{ inputs.kurtosis-enclave-name || format('{0}-{1}', 'cdk', matrix.stack) }}
      DEFAULT_L2_CLIENT: ${{ matrix.stack }}
    steps:
      - name: Debug environment variables
        run: |
          env | grep -E 'AGGLAYER_E2E_REF|KURTOSIS_CDK_REF|KURTOSIS_ENCLAVE_NAME|DEFAULT_L2_CLIENT'

      - name: Checkout agglayer-e2e
        uses: actions/checkout@v4
        with:
          repository: agglayer/e2e
          ref: ${{ env.AGGLAYER_E2E_REF }}
          path: agglayer-e2e

      - name: Checkout kurtosis-cdk
        uses: actions/checkout@v4
        with:
          repository: 0xPolygon/kurtosis-cdk
          ref: ${{ env.KURTOSIS_CDK_REF }}
          path: kurtosis-cdk

      - name: Install bats
        uses: bats-core/bats-action@3.0.0
        with:
          support-path: "${{ github.workspace }}/lib/bats-support"
          assert-path: "${{ github.workspace }}/lib/bats-assert"
          detik-path: "${{ github.workspace }}/lib/bats-detik"
          file-path: "${{ github.workspace }}/lib/bats-file"

      - name: Install polycli
        run: |
            polycli_version="${{ env.POLYCLI_VERSION }}"
            pushd $(mktemp -d) || exit 1
            curl -s -L "https://github.com/0xPolygon/polygon-cli/releases/download/${polycli_version}/polycli_${polycli_version}_linux_amd64.tar.gz" > polycli.tar.gz
            tar xf polycli.tar.gz
            mv polycli_* /usr/local/bin/polycli
            polycli version
            popd

      - name: Install Kurtosis CLI and Foundry
        uses: ./kurtosis-cdk/.github/actions/kurtosis-pre-run
        with:
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_token: ${{ secrets.DOCKER_TOKEN }}

      - name: Run Kurtosis CDK (bridge claimer disabled)
        run: |
            pushd kurtosis-cdk || exit 1
            sed -i '/^\[ClaimTxManager\]/,/^\[/{s/Enabled = true/Enabled = false/}' templates/bridge-infra/bridge-config.toml
            # The stack value will decided which client will be spun up.
            if [[ "${{ env.DEFAULT_L2_CLIENT }}" == "cdk-op-geth" ]]; then
              kurtosis run --enclave ${{ env.KURTOSIS_ENCLAVE_NAME }} .
            elif [[ "${{ env.DEFAULT_L2_CLIENT }}" == "cdk-erigon" ]]; then
              kurtosis run --enclave ${{ env.KURTOSIS_ENCLAVE_NAME }} --args-file=./.github/tests/combinations/fork12-cdk-erigon-sovereign.yml .
            else
              echo "Invalid L2 client detected: ${{ env.DEFAULT_L2_CLIENT }}. Expected 'cdk-op-geth' or 'cdk-erigon'."
              exit 1
            fi
            popd

      - name: Inspect Kurtosis enclave
        run: |
          kurtosis enclave inspect ${{ env.KURTOSIS_ENCLAVE_NAME }}

      - name: Validate test file existence
        run: |
          testfile="agglayer-e2e/${{ matrix.testfile }}"
          if [[ ! -f "$testfile" ]]; then
            echo "Test file $testfile does not exist"
            exit 1
          fi

      - name: Run e2e tests
        run: |
          pushd agglayer-e2e || exit 1
          
          if [[ "${{ env.DEFAULT_L2_CLIENT }}" == "cdk-op-geth" ]]; then
            export L2_RPC_URL=$(kurtosis port print "${{ env.KURTOSIS_ENCLAVE_NAME }}" op-el-1-op-geth-op-node-001 rpc)
          elif [[ "${{ env.DEFAULT_L2_CLIENT }}" == "cdk-erigon" ]]; then
            export L2_RPC_URL=$(kurtosis port print "${{ env.KURTOSIS_ENCLAVE_NAME }}" cdk-erigon-rpc-001 rpc)
          else
            echo "Invalid L2 client detected: ${{ env.DEFAULT_L2_CLIENT }}. Expected 'cdk-op-geth' or 'cdk-erigon'."
            exit 1
          fi
          
          export ENCLAVE_NAME="${{ env.KURTOSIS_ENCLAVE_NAME }}"

          bats --filter-tags standard ${{ matrix.testfile }}
          popd

      - name: Upload bridge tests suite artifacts
        if: always() && contains(matrix.testfile, 'bridge-tests-suite.bats')
        uses: actions/upload-artifact@v4
        with:
          name: bridge_tests_suite_output_artifacts_${{ matrix.stack }}
          path: /tmp/bridge_test_results_*
          retention-days: 7

      - name: Extract and sanitize filename
        id: extract
        run: |
          base_filename=$(basename ${{ matrix.testfile }} .bats)
          echo "filename=$base_filename" >> $GITHUB_OUTPUT

      - name: Post kurtosis run
        if: always()
        uses: ./kurtosis-cdk/.github/actions/kurtosis-post-run
        with:
          enclave_name: ${{ env.KURTOSIS_ENCLAVE_NAME }}
          args_filename: ${{ steps.extract.outputs.filename }}-${{ matrix.stack }}-artifacts

  run-monitored-chaos-stress-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        stack: ["cdk-op-geth", "cdk-erigon"]
    env:
      POLYCLI_VERSION: v0.1.84
      AGGLAYER_E2E_REF: ${{ inputs.agglayer-e2e-ref || 'main' }}
      KURTOSIS_CDK_REF: ${{ inputs.kurtosis-cdk-ref || 'main' }}
      KURTOSIS_ENCLAVE_NAME: ${{ format('cdk-chaos-{0}', matrix.stack) }}
      DEFAULT_L2_CLIENT: ${{ matrix.stack }}
      ENABLE_MONITORED_CHAOS_STRESS_TESTS: ${{ inputs.enable-monitored-chaos-stress-tests || 'true' }}
    steps:
      - name: Debug environment variables
        run: |
          env | grep -E 'AGGLAYER_E2E_REF|KURTOSIS_CDK_REF|KURTOSIS_ENCLAVE_NAME|DEFAULT_L2_CLIENT'

      - name: Checkout agglayer-e2e
        uses: actions/checkout@v4
        with:
          repository: agglayer/e2e
          ref: ${{ env.AGGLAYER_E2E_REF }}
          path: agglayer-e2e

      - name: Checkout kurtosis-cdk
        uses: actions/checkout@v4
        with:
          repository: 0xPolygon/kurtosis-cdk
          ref: ${{ env.KURTOSIS_CDK_REF }}
          path: kurtosis-cdk

      - name: Install bats
        uses: bats-core/bats-action@3.0.0

      - name: Install polycli
        run: |
            polycli_version="${{ env.POLYCLI_VERSION }}"
            pushd $(mktemp -d) || exit 1
            curl -s -L "https://github.com/0xPolygon/polygon-cli/releases/download/${polycli_version}/polycli_${polycli_version}_linux_amd64.tar.gz" > polycli.tar.gz
            tar xf polycli.tar.gz
            mv polycli_* /usr/local/bin/polycli
            polycli version
            popd

      - name: Install Kurtosis CLI and Foundry
        uses: ./kurtosis-cdk/.github/actions/kurtosis-pre-run
        with:
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_token: ${{ secrets.DOCKER_TOKEN }}

      - name: Install cgroup-tools
        run: |
          sudo apt update -y
          sudo apt install cgroup-tools
      
      - name: Install pumba
        run: |
            pushd $(mktemp -d) || exit 1
            curl -s -L "https://github.com/alexei-led/pumba/releases/download/0.11.6/pumba_linux_amd64" > pumba
            chmod +x pumba
            mv pumba /usr/local/bin/pumba
            pumba --version
            popd

      - name: Install pict
        run: |
          pushd $(mktemp -d) || exit 1
          curl -s -L "https://github.com/microsoft/pict/archive/refs/tags/v3.7.4.tar.gz" > pict.tar.gz
          tar xf pict.tar.gz
          cd pict-3.7.4
          make pict
          mv pict /usr/local/bin/pict
          popd

      - name: Run Kurtosis CDK (bridge claimer disabled)
        run: |
            pushd kurtosis-cdk || exit 1
            sed -i '/^\[ClaimTxManager\]/,/^\[/{s/Enabled = true/Enabled = false/}' templates/bridge-infra/bridge-config.toml
            # The stack value will decided which client will be spun up.
            if [[ "${{ env.DEFAULT_L2_CLIENT }}" == "cdk-op-geth" ]]; then
              kurtosis run --enclave ${{ env.KURTOSIS_ENCLAVE_NAME }} .
            elif [[ "${{ env.DEFAULT_L2_CLIENT }}" == "cdk-erigon" ]]; then
              kurtosis run --enclave ${{ env.KURTOSIS_ENCLAVE_NAME }} --args-file=./.github/tests/combinations/fork12-cdk-erigon-sovereign.yml .
            else
              echo "Invalid L2 client detected: ${{ env.DEFAULT_L2_CLIENT }}. Expected 'cdk-op-geth' or 'cdk-erigon'."
              exit 1
            fi
            popd

      - name: Inspect Kurtosis enclave
        run: |
          kurtosis enclave inspect ${{ env.KURTOSIS_ENCLAVE_NAME }}

      - name: Run monitored chaos & stress tests
        run: |
          pushd agglayer-e2e || exit 1

          if [[ "${{ env.DEFAULT_L2_CLIENT }}" == "cdk-op-geth" ]]; then
            export L2_RPC_URL=$(kurtosis port print "${{ env.KURTOSIS_ENCLAVE_NAME }}" op-el-1-op-geth-op-node-001 rpc)
          elif [[ "${{ env.DEFAULT_L2_CLIENT }}" == "cdk-erigon" ]]; then
            export L2_RPC_URL=$(kurtosis port print "${{ env.KURTOSIS_ENCLAVE_NAME }}" cdk-erigon-rpc-001 rpc)
          else
            echo "Invalid L2 client detected: ${{ env.DEFAULT_L2_CLIENT }}. Expected 'cdk-op-geth' or 'cdk-erigon'."
            exit 1
          fi

          export ENCLAVE_NAME="${{ env.KURTOSIS_ENCLAVE_NAME }}"
          
          pushd ./scenarios/monitored-tests/pre-state
          bash generate_test_input.bash
          popd

          bats ./scenarios/monitored-tests/monitored-tests.bats
          popd

      - name: Upload monitored chaos & stress tests suite artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: monitored_chaos_stress_test_artifacts_${{ matrix.stack }}
          path: agglayer-e2e/scenarios/monitored-tests/post-state
          retention-days: 7

      - name: Post kurtosis run
        if: always()
        uses: ./kurtosis-cdk/.github/actions/kurtosis-post-run
        with:
          enclave_name: ${{ env.KURTOSIS_ENCLAVE_NAME }}
          args_filename: monitored-chaos-stress-tests-${{ matrix.stack }}-artifacts