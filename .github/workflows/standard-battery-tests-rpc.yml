# Make sure to configure the agglayer/e2e Github Secrets before running this test
name: Standard Battery Tests - RPC

on:
  workflow_dispatch:
    inputs:
      agglayer-e2e-ref:
        description: "agglayer/e2e repo ref (branch, tag, or commit)"
        default: "main"
        required: true
        type: string
      max-parallel-runs:
        description: "strategy.max-parallel - how many matrix tests to run in parallel"
        default: 1
        required: true
        type: number
      target-network:
        description: "target network to source env file on"
        default: "bali-35"
        required: true
        type: choice
        options:
          - bali-35
          - bali-44
          - cardona-37
          - custom-bali
          - custom-cardona
      user-input-gas-token-address:
        description: "l2 gas token address contract on l1 - keep empty, only fill for custom-bali or custom-cardona"
        required: false
        type: string
      user-input-bridge-service-url:
        description: "l2 bridge service endpoint - keep empty, only fill for custom-bali or custom-cardona"
        required: false
        type: string

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  discover-standard-tests:
    runs-on: gke-shared-dev-runners
    env:
      AGGLAYER_E2E_REF: ${{ inputs.agglayer-e2e-ref }}
    outputs:
      testfiles: ${{ steps.set-matrix.outputs.testfiles }}
    steps:
      - name: Checkout agglayer-e2e
        uses: actions/checkout@v4
        with:
          repository: agglayer/e2e
          ref: ${{ env.AGGLAYER_E2E_REF }}
          path: agglayer-e2e

      - name: Find standard-tagged bats files
        id: set-matrix
        run: |
            pushd agglayer-e2e || exit 1
            # strictly detect tags with file_tags=standard and test_tags=standard
            files=$(grep -rlP '#\s*bats\s+(?:file_tags|test_tags)=[^#]*\bstandard\b(?!-)' ./tests | grep '\.bats$' || true)
            echo "Found files:"
            echo "$files"
            # Remove empty lines and ensure valid JSON array without trailing empty string
            files_json=$(echo "$files" | awk NF | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "Files array:"
            echo "$files_json"
            echo "testfiles=$files_json" >> $GITHUB_OUTPUT
            popd

  run-standard-battery-tests:
    runs-on: gke-shared-dev-runners
    needs: discover-standard-tests
    timeout-minutes: 360
    strategy:
      fail-fast: false
      max-parallel: ${{ fromJson(inputs.max-parallel-runs || '1') }}
      matrix:
        testfile: ${{ fromJson(needs.discover-standard-tests.outputs.testfiles) }}
    env:
      POLYCLI_VERSION: v0.1.84
      AGGLAYER_E2E_REF: ${{ inputs.agglayer-e2e-ref }}
      L1_RPC_ENDPOINT: ${{ secrets.L1_RPC_ENDPOINT }}
      L2_RPC_ENDPOINT: ${{ inputs.target-network == 'cardona-37' && secrets.L2_CARDONA_37_RPC_ENDPOINT || inputs.target-network == 'bali-35' && secrets.L2_BALI_35_RPC_ENDPOINT || inputs.target-network == 'bali-44' && secrets.L2_BALI_44_RPC_ENDPOINT || inputs.target-network == 'custom-bali' && secrets.L2_CUSTOM_BALI_RPC_ENDPOINT || inputs.target-network == 'custom-cardona' && secrets.L2_CUSTOM_CARDONA_RPC_ENDPOINT }}
      L1_FUNDED_PRIVATE_KEY: ${{ secrets.L1_FUNDED_PRIVATE_KEY }}
      L2_FUNDED_PRIVATE_KEY: ${{ secrets.L2_FUNDED_PRIVATE_KEY }}
      TARGET_NETWORK: ${{ inputs.target-network }}
    steps:
      - name: Debug environment variables
        run: |
          env | grep -E 'AGGLAYER_E2E_REF'

      - name: Validate custom inputs
        run: |
          # Validate that custom inputs are only provided for custom networks
          if [[ "${{ inputs.target-network }}" != "custom-bali" && "${{ inputs.target-network }}" != "custom-cardona" ]]; then
            if [[ -n "${{ inputs.user-input-gas-token-address }}" ]]; then
              echo "Error: user-input-gas-token-address should only be used with custom-bali or custom-cardona target networks"
              exit 1
            fi
            if [[ -n "${{ inputs.user-input-bridge-service-url }}" ]]; then
              echo "Error: user-input-bridge-service-url should only be used with custom-bali or custom-cardona target networks"
              exit 1
            fi
          fi

      - name: Checkout agglayer-e2e
        uses: actions/checkout@v4
        with:
          repository: agglayer/e2e
          ref: ${{ env.AGGLAYER_E2E_REF }}
          path: agglayer-e2e

      - name: Install bats
        uses: bats-core/bats-action@3.0.0
        with:
          support-path: "${{ github.workspace }}/lib/bats-support"
          assert-path: "${{ github.workspace }}/lib/bats-assert"
          detik-path: "${{ github.workspace }}/lib/bats-detik"
          file-path: "${{ github.workspace }}/lib/bats-file"

      - name: Install polycli
        run: |
            polycli_version="${{ env.POLYCLI_VERSION }}"
            pushd $(mktemp -d) || exit 1
            curl -s -L "https://github.com/0xPolygon/polygon-cli/releases/download/${polycli_version}/polycli_${polycli_version}_linux_amd64.tar.gz" > polycli.tar.gz
            tar xf polycli.tar.gz
            sudo mv polycli_* /usr/local/bin/polycli
            polycli version
            popd

      - name: Install system utilities
        shell: bash
        run: |
          sudo apt update
          sudo apt install -y jq xxd
      
      - name: Install yq
        shell: bash
        run: |
          sudo curl -L -o /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          yq --version

      - name: Install foundry
        uses: foundry-rs/foundry-toolchain@de808b1eea699e761c404bda44ba8f21aba30b2c # v1.3.1
        with:
          version: v1.0.0 
          cache: false

      - name: Install pem certificate
        shell: bash
        env:
          POLYGON_CERT: ${{ secrets.POLYGON_CERT }}
        run: |
          sudo apt-get install -y ca-certificates
          echo "$POLYGON_CERT" | sudo tee /usr/local/share/ca-certificates/local-ca.crt > /dev/null
          sudo update-ca-certificates

      - name: Validate RPC Endpoint
        run: |
          cast chain-id --rpc-url ${{ secrets.L1_RPC_ENDPOINT }}
          if [[ "${{ inputs.target-network }}" == "cardona-37" ]]; then
            cast chain-id --rpc-url ${{ secrets.L2_CARDONA_37_RPC_ENDPOINT }}
          elif [[ "${{ inputs.target-network }}" == "bali-35" ]]; then
            cast chain-id --rpc-url ${{ secrets.L2_BALI_35_RPC_ENDPOINT }}
          elif [[ "${{ inputs.target-network }}" == "bali-44" ]]; then
            cast chain-id --rpc-url ${{ secrets.L2_BALI_44_RPC_ENDPOINT }}
          elif [[ "${{ inputs.target-network }}" == "custom-bali" ]]; then
            cast chain-id --rpc-url ${{ secrets.L2_CUSTOM_BALI_RPC_ENDPOINT }}
          elif [[ "${{ inputs.target-network }}" == "custom-cardona" ]]; then
            cast chain-id --rpc-url ${{ secrets.L2_CUSTOM_CARDONA_RPC_ENDPOINT }}
          else
            echo "no valid RPC to validate"
            exit 1
          fi

      - name: Validate test file existence
        run: |
          testfile="agglayer-e2e/${{ matrix.testfile }}"
          if [[ ! -f "$testfile" ]]; then
            echo "Test file $testfile does not exist"
            exit 1
          fi

      - name: Run e2e tests
        run: |
          pushd agglayer-e2e || exit 1

          # Load public environment variables
          if [[ "${{ env.TARGET_NETWORK }}" == "cardona-37" ]]; then
            if [[ -f "tests/lxly/networks/cardona-37.env" ]]; then
              set -a
              source tests/lxly/networks/cardona-37.env
              set +a
            fi
          elif [[ "${{ env.TARGET_NETWORK }}" == "bali-35" ]]; then
            if [[ -f "tests/lxly/networks/bali-35.env" ]]; then
              set -a
              source tests/lxly/networks/bali-35.env
              set +a
            fi
          elif [[ "${{ env.TARGET_NETWORK }}" == "bali-44" ]]; then
            if [[ -f "tests/lxly/networks/bali-44.env" ]]; then
              set -a
              source tests/lxly/networks/bali-44.env
              set +a
            fi
          elif [[ "${{ env.TARGET_NETWORK }}" == "custom-bali" ]]; then
            if [[ -f "tests/lxly/networks/custom-bali.env" ]]; then
              set -a
              source tests/lxly/networks/custom-bali.env
              set +a
            fi
          elif [[ "${{ env.TARGET_NETWORK }}" == "custom-cardona" ]]; then
            if [[ -f "tests/lxly/networks/custom-cardona.env" ]]; then
              set -a
              source tests/lxly/networks/custom-cardona.env
              set +a
            fi
          else
            echo "Invalid target network detected: ${{ env.TARGET_NETWORK }}. Expected 'cardona-37', 'bali-35', 'bali-44', 'custom-bali', or 'custom-cardona'."
            exit 1
          fi

          # Set extended timeout and confirmation settings for cast
          export ETH_RPC_TIMEOUT=2400

          # Set sensitive values from GitHub secrets
          export L1_RPC_URL="${{ env.L1_RPC_ENDPOINT }}"
          export L2_RPC_URL="${{ env.L2_RPC_ENDPOINT }}"
          export L1_PRIVATE_KEY="${{ env.L1_FUNDED_PRIVATE_KEY }}"
          export L2_PRIVATE_KEY="${{ env.L2_FUNDED_PRIVATE_KEY }}"

          # Override below values if provided by user input (only for custom networks)
          if [[ "${{ inputs.target-network }}" == "custom-bali" || "${{ inputs.target-network }}" == "custom-cardona" ]]; then
            if [[ -n "${{ inputs.user-input-gas-token-address }}" ]]; then
              echo "Using user-provided gas token address"
              export GAS_TOKEN_ADDRESS="${{ inputs.user-input-gas-token-address }}"
            fi

            if [[ -n "${{ inputs.user-input-bridge-service-url }}" ]]; then
              echo "Using user-provided bridge service URL"
              export BRIDGE_SERVICE_URL="${{ inputs.user-input-bridge-service-url }}"
            fi
          fi

          bats --filter-tags standard ${{ matrix.testfile }}
          popd

      - name: Upload bridge tests suite artifacts
        if: always() && contains(matrix.testfile, 'bridge-tests-suite.bats')
        uses: actions/upload-artifact@v4
        with:
          name: bridge_tests_suite_output_artifacts
          path: /tmp/bridge_test_results_*
          retention-days: 1